/*
	     * Cryptographically secure pseudorandom number generator
	     *
	     * As Math.random() is cryptographically not safe to use
	     */

/*
	     * Local polyfill of Object.create

	     */

/*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* Z+1 */

/* binding */

/* default */

/* eslint-disable no-proto */

/* eslint-disable no-unused-vars */

/* eslint-disable node/no-deprecated-api */

/* global Reflect, Promise */

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

/* harmony default export */

/* harmony export */

/* jshint maxdepth : false */

/* k = 0 */

/* k = 1 */

/* k = 10 */

/* k = 11 */

/* k = 12 */

/* k = 13 */

/* k = 14 */

/* k = 15 */

/* k = 16 */

/* k = 17 */

/* k = 18 */

/* k = 2 */

/* k = 3 */

/* k = 4 */

/* k = 5 */

/* k = 6 */

/* k = 7 */

/* k = 8 */

/* k = 9 */

/* module decorator */

/* n */

/* o */

/* provided dependency */

/* reexport */

/* webpack/runtime/amd options */

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */

/*#__PURE__*/

/**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */

/**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */

/**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */

/**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */

/**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */

/**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */

/**
	         * Abstract base CBC mode.
	         */

/**
	         * Adds data to be encrypted or decrypted.
	         *
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.process('data');
	         *     var encrypted = cipher.process(wordArray);
	         */

/**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */

/**
	         * Adds this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to add with this word.
	         *
	         * @return {X64Word} A new x64-Word object after adding.
	         *
	         * @example
	         *
	         *     var added = x64Word.add(anotherX64Word);
	         */

/**
	         * Bitwise ANDs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to AND with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ANDing.
	         *
	         * @example
	         *
	         *     var anded = x64Word.and(anotherX64Word);
	         */

/**
	         * Bitwise NOTs this word.
	         *
	         * @return {X64Word} A new x64-Word object after negating.
	         *
	         * @example
	         *
	         *     var negated = x64Word.not();
	         */

/**
	         * Bitwise ORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to OR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ORing.
	         *
	         * @example
	         *
	         *     var ored = x64Word.or(anotherX64Word);
	         */

/**
	         * Bitwise XORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to XOR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after XORing.
	         *
	         * @example
	         *
	         *     var xored = x64Word.xor(anotherX64Word);
	         */

/**
	         * CBC decryptor.
	         */

/**
	         * CBC encryptor.
	         */

/**
	         * Computes the Password-Based Key Derivation Function 2.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */

/**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */

/**
	         * Configuration options.
	         *
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */

/**
	         * Configuration options.
	         *
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */

/**
	         * Configuration options.
	         *
	         * @property {Mode} mode The block mode to use. Default: CBC
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
	         */

/**
	         * Configuration options.
	         *
	         * @property {WordArray} iv The IV to use for this operation.
	         */

/**
	         * Configuration options.
	         *
	         * @property {number} drop The number of keystream words to drop. Default 192
	         */

/**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */

/**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hasher to use. Default: SHA1
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */

/**
	         * Configuration options.
	         *
	         * @property {number} outputLength
	         *   The desired number of bits in the output hash.
	         *   Only values permitted are: 224, 256, 384, 512.
	         *   Default: 512
	         */

/**
	         * Configuration options.
	         */

/**
	         * Converts a Base64 string to a word array.
	         *
	         * @param {string} base64Str The Base64 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	         */

/**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */

/**
	         * Converts a UTF-16 BE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 BE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
	         */

/**
	         * Converts a UTF-16 LE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 LE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
	         */

/**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */

/**
	         * Converts a cipher params object to an OpenSSL-compatible string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The OpenSSL-compatible string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
	         */

/**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */

/**
	         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
	         *
	         * @param {string} input The hexadecimally encoded string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
	         */

/**
	         * Converts a word array to a Base64 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Base64 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	         */

/**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */

/**
	         * Converts a word array to a UTF-16 BE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 BE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
	         */

/**
	         * Converts a word array to a UTF-16 LE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 LE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
	         */

/**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */

/**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */

/**
	         * Converts an OpenSSL-compatible string to a cipher params object.
	         *
	         * @param {string} openSSLStr The OpenSSL-compatible string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
	         */

/**
	         * Converts serialized ciphertext to CipherParams,
	         * else assumed CipherParams already and returns ciphertext unchanged.
	         *
	         * @param {CipherParams|string} ciphertext The ciphertext.
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
	         *
	         * @return {CipherParams} The unserialized ciphertext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
	         */

/**
	         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The hexadecimally encoded string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
	         */

/**
	         * Converts this 64-bit word array to a 32-bit word array.
	         *
	         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
	         *
	         * @example
	         *
	         *     var x32WordArray = x64WordArray.toX32();
	         */

/**
	         * Converts this cipher params object to a string.
	         *
	         * @param {Format} formatter (Optional) The formatting strategy to use.
	         *
	         * @return {string} The stringified cipher params.
	         *
	         * @throws Error If neither the formatter nor the default formatter is set.
	         *
	         * @example
	         *
	         *     var string = cipherParams + '';
	         *     var string = cipherParams.toString();
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
	         */

/**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */

/**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */

/**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */

/**
	         * Creates a copy of this word array.
	         *
	         * @return {X64WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = x64WordArray.clone();
	         */

/**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */

/**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */

/**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */

/**
	         * Creates shortcut functions to a cipher's object interface.
	         *
	         * @param {Cipher} cipher The cipher to create a helper for.
	         *
	         * @return {Object} An object with encrypt and decrypt shortcut functions.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
	         */

/**
	         * Creates this cipher in decryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
	         */

/**
	         * Creates this cipher in encryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
	         */

/**
	         * Creates this mode for decryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
	         */

/**
	         * Creates this mode for encryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
	         */

/**
	         * Decrypts serialized ciphertext using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */

/**
	         * Decrypts serialized ciphertext.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */

/**
	         * Derives a key and IV from a password.
	         *
	         * @param {string} password The password to derive from.
	         * @param {number} keySize The size in words of the key to generate.
	         * @param {number} ivSize The size in words of the IV to generate.
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
	         */

/**
	         * Derives a key from a password.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */

/**
	         * Encrypts a message using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */

/**
	         * Encrypts a message.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */

/**
	         * Finalizes the HMAC computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The HMAC.
	         *
	         * @example
	         *
	         *     var hmac = hmacHasher.finalize();
	         *     var hmac = hmacHasher.finalize('message');
	         *     var hmac = hmacHasher.finalize(wordArray);
	         */

/**
	         * Finalizes the encryption or decryption process.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after final processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.finalize();
	         *     var encrypted = cipher.finalize('data');
	         *     var encrypted = cipher.finalize(wordArray);
	         */

/**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */

/**
	         * Initializes a newly created 64-bit word.
	         *
	         * @param {number} high The high 32 bits.
	         * @param {number} low The low 32 bits.
	         *
	         * @example
	         *
	         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
	         */

/**
	         * Initializes a newly created HMAC.
	         *
	         * @param {Hasher} hasher The hash algorithm to use.
	         * @param {WordArray|string} key The secret key.
	         *
	         * @example
	         *
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	         */

/**
	         * Initializes a newly created cipher params object.
	         *
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({
	         *         ciphertext: ciphertextWordArray,
	         *         key: keyWordArray,
	         *         iv: ivWordArray,
	         *         salt: saltWordArray,
	         *         algorithm: CryptoJS.algo.AES,
	         *         mode: CryptoJS.mode.CBC,
	         *         padding: CryptoJS.pad.PKCS7,
	         *         blockSize: 4,
	         *         formatter: CryptoJS.format.OpenSSL
	         *     });
	         */

/**
	         * Initializes a newly created cipher.
	         *
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */

/**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */

/**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.EvpKDF.create();
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
	         */

/**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.PBKDF2.create();
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
	         */

/**
	         * Initializes a newly created mode.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
	         */

/**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */

/**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create();
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ]);
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ], 10);
	         */

/**
	         * Pads data using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to pad.
	         * @param {number} blockSize The multiple that the data should be padded to.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
	         */

/**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */

/**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */

/**
	         * Resets this HMAC to its initial state.
	         *
	         * @example
	         *
	         *     hmacHasher.reset();
	         */

/**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */

/**
	         * Resets this cipher to its initial state.
	         *
	         * @example
	         *
	         *     cipher.reset();
	         */

/**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */

/**
	         * Rotates this word n bits to the left.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotL(25);
	         */

/**
	         * Rotates this word n bits to the right.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotR(7);
	         */

/**
	         * Shifts this word n bits to the left.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftL(25);
	         */

/**
	         * Shifts this word n bits to the right.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftR(7);
	         */

/**
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to unpad.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
	         */

/**
	         * Updates this HMAC with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {HMAC} This HMAC instance.
	         *
	         * @example
	         *
	         *     hmacHasher.update('message');
	         *     hmacHasher.update(wordArray);
	         */

/**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */

/**
	     * AES block cipher algorithm.
	     */

/**
	     * Computes the Password-Based Key Derivation Function 2.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.PBKDF2(password, salt);
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
	     */

/**
	     * CryptoJS namespace.
	     */

/**
	     * Derives a key from a password.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.EvpKDF(password, salt);
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
	     */

/**
	     * MD5 hash algorithm.
	     */

/**
	     * Modified RC4 stream cipher algorithm.
	     */

/**
	     * SHA-256 hash algorithm.
	     */

/**
	     * SHA-3 hash algorithm.
	     */

/**
	     * SHA-512 hash algorithm.
	     */

/**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacMD5(message, key);
	     */

/**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
	     */

/**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA1(message, key);
	     */

/**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA224(message, key);
	     */

/**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA256(message, key);
	     */

/**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA3(message, key);
	     */

/**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA384(message, key);
	     */

/**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA512(message, key);
	     */

/**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.MD5('message');
	     *     var hash = CryptoJS.MD5(wordArray);
	     */

/**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.RIPEMD160('message');
	     *     var hash = CryptoJS.RIPEMD160(wordArray);
	     */

/**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA1('message');
	     *     var hash = CryptoJS.SHA1(wordArray);
	     */

/**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA224('message');
	     *     var hash = CryptoJS.SHA224(wordArray);
	     */

/**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA256('message');
	     *     var hash = CryptoJS.SHA256(wordArray);
	     */

/**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA3('message');
	     *     var hash = CryptoJS.SHA3(wordArray);
	     */

/**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA384('message');
	     *     var hash = CryptoJS.SHA384(wordArray);
	     */

/**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA512('message');
	     *     var hash = CryptoJS.SHA512(wordArray);
	     */

/**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
	     */

/**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
	     */

/**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
	     */

/**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
	     */

/**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
	     */

/**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
	     */

/**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
	     */

/**
	     * Triple-DES block cipher algorithm.
	     */

/**
	     * UTF-16 LE encoding strategy.
	     */

/**
	 * A noop padding strategy.
	 */

/**
	 * ANSI X.923 padding strategy.
	 */

/**
	 * Cipher Feedback block mode.
	 */

/**
	 * Cipher core components.
	 */

/**
	 * Counter block mode.
	 */

/**
	 * Electronic Codebook block mode.
	 */

/**
	 * ISO 10126 padding strategy.
	 */

/**
	 * ISO/IEC 9797-1 Padding Method 2.
	 */

/**
	 * Output Feedback block mode.
	 */

/**
	 * Zero padding strategy.
	 */

/**
     *  Counter object for CTR common mode of operation
     */

/**
     *  Mode Of Operation - Cipher Block Chaining (CBC)
     */

/**
     *  Mode Of Operation - Cipher Feedback (CFB)
     */

/**
     *  Mode Of Operation - Counter (CTR)
     */

/**
     *  Mode Of Operation - Electonic Codebook (ECB)
     */

/**
     *  Mode Of Operation - Output Feedback (OFB)
     */

/**
     * Add a new item to the queue and ensure the highest priority element
     * is at the front of the queue.
     */

/**
     * Return the highest priority element in the queue.
     */

/**
   * A very naive priority queue implementation.
   */

/**
 * Add alignment patterns bits to matrix
 *
 * Note: this function must be called after {@link setupTimingPattern}
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */

/**
 * Add encoded data bits to matrix
 *
 * @param  {BitMatrix} matrix Modules matrix
 * @param  {Buffer}    data   Data codewords
 */

/**
 * Add finder patterns bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */

/**
 * Add format info bits to matrix
 *
 * @param  {BitMatrix} matrix               Modules matrix
 * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
 * @param  {Number}    maskPattern          Mask pattern reference value
 */

/**
 * Add timing pattern bits to matrix
 *
 * Note: this function must be called before {@link setupAlignmentPattern}
 *
 * @param  {BitMatrix} matrix Modules matrix
 */

/**
 * Add version info bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */

/**
 * Alignment pattern are fixed reference pattern in defined positions
 * in a matrix symbology, which enables the decode software to re-synchronise
 * the coordinate mapping of the image modules in the event of moderate amounts
 * of distortion of the image.
 *
 * Alignment patterns are present only in QR Code symbols of version 2 or larger
 * and their number depends on the symbol version.
 */

/**
 * Alphanumeric mode encodes data from a set of 45 characters,
 * i.e. 10 numeric digits (0 - 9),
 *      26 alphabetic characters (A - Z),
 *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
 * Normally, two input characters are represented by 11 bits.
 *
 * @type {Object}
 */

/**
 * Applies xor operator at specified location
 * (used during masking process)
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 */

/**
 * Apply a mask pattern to a BitMatrix
 *
 * @param  {Number}    pattern Pattern reference number
 * @param  {BitMatrix} data    BitMatrix data
 */

/**
 * Array of characters available in alphanumeric mode
 *
 * As per QR Code specification, to each character
 * is assigned a value from 0 to 44 which in this case coincides
 * with the array index
 *
 * @type {Array}
 */

/**
 * Build QR Code symbol
 *
 * @param  {String} data                 Input string
 * @param  {Number} version              QR Code version
 * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
 * @param  {MaskPattern} maskPattern     Mask pattern
 * @return {Object}                      Object containing symbol data
 */

/**
 * Builds a graph from a list of nodes.
 * All segments in each node group will be connected with all the segments of
 * the next group and so on.
 *
 * At each connection will be assigned a weight depending on the
 * segment's byte length.
 *
 * @param  {Array} nodes    Array of object with segments data
 * @param  {Number} version QR Code version
 * @return {Object}         Graph of all possible segments
 */

/**
 * Builds a list of segments from an array.
 * Array can contain Strings or Objects with segment's info.
 *
 * For each item which is a string, will be generated a segment with the given
 * string and the more appropriate encoding mode.
 *
 * For each item which is an object, will be generated a segment with the given
 * data and mode.
 * Objects must contain at least the property "data".
 * If property "mode" is not present, the more suitable mode will be used.
 *
 * @param  {Array} array Array of objects with segments data
 * @return {Array}       Array of Segments
 */

/**
 * Builds a segment from a specified data and mode.
 * If a mode is not specified, the more suitable will be used.
 *
 * @param  {String} data             Input data
 * @param  {Mode | String} modesHint Data mode
 * @return {Segment}                 Segment
 */

/**
 * Builds an optimized sequence of segments from a string,
 * which will produce the shortest possible bitstream.
 *
 * @param  {String} data    Input string
 * @param  {Number} version QR Code version
 * @return {Array}          Array of segments
 */

/**
 * Calculate proportion of dark modules in entire symbol
 *
 * Points: N4 * k
 *
 * k is the rating of the deviation of the proportion of dark modules
 * in the symbol from 50% in steps of 5%
 */

/**
 * Calculate the remainder of polynomials division
 *
 * @param  {Buffer} divident Polynomial
 * @param  {Buffer} divisor  Polynomial
 * @return {Buffer}          Remainder
 */

/**
 * Calculate the row/column coordinates of the center module of each alignment pattern
 * for the specified QR Code version.
 *
 * The alignment patterns are positioned symmetrically on either side of the diagonal
 * running from the top left corner of the symbol to the bottom right corner.
 *
 * Since positions are simmetrical only half of the coordinates are returned.
 * Each item of the array will represent in turn the x and y coordinate.
 * @see {@link getPositions}
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinate
 */

/**
 * Check if QR Code version is valid
 *
 * @param  {Number}  version QR Code version
 * @return {Boolean}         true if valid version, false otherwise
 */

/**
 * Check if bit at specified location is reserved
 *
 * @param {Number}   row
 * @param {Number}   col
 * @return {Boolean}
 */

/**
 * Check if input param is a valid mode object
 *
 * @param   {Mode}    mode Mode object
 * @returns {Boolean} True if valid mode, false otherwise
 */

/**
 * Check if mask pattern value is valid
 *
 * @param  {Number}  mask    Mask pattern
 * @return {Boolean}         true if valid, false otherwise
 */

/**
 * Convert a typed array to a Buffer without a copy
 *
 * Author:   Feross Aboukhadijeh <https://feross.org>
 * License:  MIT
 *
 * `npm install typedarray-to-buffer`
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Create encoded codewords from data input
 *
 * @param  {Number}   version              QR Code version
 * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
 * @param  {ByteData} data                 Data input
 * @return {Buffer}                        Buffer containing encoded codewords
 */

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/

/**
 * Data mask pattern reference
 * @type {Object}
 */

/**
 * Encode data with Bose-Chaudhuri-Hocquenghem
 *
 * @param  {Number} data Value to encode
 * @return {Number}      Encoded value
 */

/**
 * Encode input data with Reed-Solomon and return codewords with
 * relative error correction bits
 *
 * @param  {BitBuffer} bitBuffer            Data to encode
 * @param  {Number}    version              QR Code version
 * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
 * @return {Buffer}                         Buffer containing encoded codewords
 */

/**
 * Encodes a chunk of data
 *
 * @param  {Buffer} data Buffer containing input data
 * @return {Buffer}      Buffer containing encoded data
 */

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */

/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */

/**
 * Extracts a series of segments with the appropriate
 * modes from a string
 *
 * @param  {String} dataStr Input string
 * @return {Array}          Array of object with segments data
 */

/**
 * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
 * preceded or followed by light area 4 modules wide
 *
 * Points: N3 * number of pattern found
 */

/**
 * Find 2x2 blocks with the same color and assign a penalty value
 *
 * Points: N2 * (m - 1) * (n - 1)
 */

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/

/**
 * Generate an irreducible generator polynomial of specified degree
 * (used by Reed-Solomon encoder)
 *
 * @param  {Number} degree Degree of the generator polynomial
 * @return {Buffer}        Buffer containing polynomial coefficients
 */

/**
 * Generates a list of all possible nodes combination which
 * will be used to build a segments graph.
 *
 * Nodes are divided by groups. Each group will contain a list of all the modes
 * in which is possible to encode the given text.
 *
 * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
 * The group for '12345' will contain then 3 objects, one for each
 * possible encoding mode.
 *
 * Each node represents a possible segment.
 *
 * @param  {Array} segs Array of object with segments data
 * @return {Array}      Array of object with segments data
 */

/**
 * Get a list of segments of the specified mode
 * from a string
 *
 * @param  {Mode}   mode Segment mode
 * @param  {String} str  String to process
 * @return {Array}       Array of object with segments data
 */

/**
 * Get mode object from its name
 *
 * @param   {String} string Mode name
 * @returns {Mode}          Mode object
 */

/**
 * Helper class to handle QR Code symbol modules
 *
 * @param {Number} size Symbol size
 */

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */

/**
 * Implementation of a subset of node.js Buffer methods for the browser.
 * Based on https://github.com/feross/buffer
 */

/**
 * In byte mode, data is encoded at 8 bits per character.
 *
 * @type {Object}
 */

/**
 * Initialize the encoder.
 * The input param should correspond to the number of error correction codewords.
 *
 * @param  {Number} degree
 */

/**
 * Merges adjacent segments which have the same mode
 *
 * @param  {Array} segs Array of object with segments data
 * @return {Array}      Array of object with segments data
 */

/**
 * Mixed mode will contain a sequences of data in a combination of any of
 * the modes described above
 *
 * @type {Object}
 */

/**
 * Multiplies two number inside Galois Field
 *
 * @param  {Number} x
 * @param  {Number} y
 * @return {Number}
 */

/**
 * Multiplies two polynomials inside Galois Field
 *
 * @param  {Buffer} p1 Polynomial
 * @param  {Buffer} p2 Polynomial
 * @return {Buffer}    Product of p1 and p2
 */

/**
 * Numeric mode encodes data from the decimal digit set (0 - 9)
 * (byte values 30HEX to 39HEX).
 * Normally, 3 data characters are represented by 10 bits.
 *
 * @type {Object}
 */

/**
 * Precompute the log and anti-log tables for faster computation later
 *
 * For each possible value in the galois field 2^8, we will pre-compute
 * the logarithm and anti-logarithm (exponential) of this value
 *
 * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
 */

/**
 * QR Code
 *
 * @param {String | Array} data                 Input data
 * @param {Object} options                      Optional configurations
 * @param {Number} options.version              QR Code version
 * @param {String} options.errorCorrectionLevel Error correction level
 * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
 */

/**
 * QRCode for JavaScript
 *
 * modified by Ryan Day for nodejs support
 * Copyright (c) 2011 Ryan Day
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 *
//---------------------------------------------------------------------
// QRCode for JavaScript
//
// Copyright (c) 2009 Kazuhiko Arase
//
// URL: http://www.d-project.com/
//
// Licensed under the MIT license:
//   http://www.opensource.org/licenses/mit-license.php
//
// The word "QR Code" is registered trademark of
// DENSO WAVE INCORPORATED
//   http://www.denso-wave.com/qrcode/faqpatent-e.html
//
//---------------------------------------------------------------------
*/

/**
 * Return mask value at given position
 *
 * @param  {Number} maskPattern Pattern reference value
 * @param  {Number} i           Row
 * @param  {Number} j           Column
 * @return {Boolean}            Mask value
 */

/**
 * Return mode name as string
 *
 * @param {Mode} mode Mode object
 * @returns {String}  Mode name
 */

/**
 * Returns UTF8 byte length
 *
 * @param  {String} str Input string
 * @return {Number}     Number of byte
 */

/**
 * Returns an array containing the positions of each alignment pattern.
 * Each array's element represent the center point of the pattern as (x, y) coordinates
 *
 * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
 * and filtering out the items that overlaps with finder pattern
 *
 * @example
 * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
 * The alignment patterns, therefore, are to be centered on (row, column)
 * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
 * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
 * and are not therefore used for alignment patterns.
 *
 * var pos = getPositions(7)
 * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinates
 */

/**
 * Returns an array containing the positions of each finder pattern.
 * Each array's element represent the top-left point of the pattern as (x, y) coordinates
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinates
 */

/**
 * Returns anti-log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */

/**
 * Returns bit value at specified location
 *
 * @param  {Number}  row
 * @param  {Number}  col
 * @return {Boolean}
 */

/**
 * Returns format information with relative error correction bits
 *
 * The format information is a 15-bit sequence containing 5 data bits,
 * with 10 error correction bits calculated using the (15, 5) BCH code.
 *
 * @param  {Number} errorCorrectionLevel Error correction level
 * @param  {Number} mask                 Mask pattern
 * @return {Number}                      Encoded format information bits
 */

/**
 * Returns how many bits are needed to encode a string of
 * specified length with the specified mode
 *
 * @param  {Number} length String length
 * @param  {Mode} mode     Segment mode
 * @return {Number}        Bit length
 */

/**
 * Returns how much data can be stored with the specified QR code version
 * and error correction level
 *
 * @param  {Number} version              QR Code version (1-40)
 * @param  {Number} errorCorrectionLevel Error correction level
 * @param  {Mode}   mode                 Data mode
 * @return {Number}                      Quantity of storable data
 */

/**
 * Returns log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */

/**
 * Returns mask pattern from a value.
 * If value is not valid, returns undefined
 *
 * @param  {Number|String} value        Mask pattern value
 * @return {Number}                     Valid mask pattern or undefined
 */

/**
 * Returns mode from a value.
 * If value is not a valid mode, returns defaultValue
 *
 * @param  {Mode|String} value        Encoding mode
 * @param  {Mode}        defaultValue Fallback value
 * @return {Mode}                     Encoding mode
 */

/**
 * Returns the QR Code size for the specified version
 *
 * @param  {Number} version QR Code version
 * @return {Number}         size of QR code
 */

/**
 * Returns the best mask pattern for data
 *
 * @param  {BitMatrix} data
 * @return {Number} Mask pattern reference number
 */

/**
 * Returns the minimum version needed to contain the amount of data
 *
 * @param  {Segment} data                    Segment of data
 * @param  {Number} [errorCorrectionLevel=H] Error correction level
 * @param  {Mode} mode                       Data mode
 * @return {Number}                          QR Code version
 */

/**
 * Returns the most efficient mode to store the specified data
 *
 * @param  {String} dataStr Input data string
 * @return {Mode}           Best mode
 */

/**
 * Returns the number of bits needed to store the data length
 * according to QR Code specifications.
 *
 * @param  {Mode}   mode    Data mode
 * @param  {Number} version QR Code version
 * @return {Number}         Number of bits
 */

/**
 * Returns the number of error correction block that the QR Code should contain
 * for the specified version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction blocks
 */

/**
 * Returns the number of error correction codewords to use for the specified
 * version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction codewords
 */

/**
 * Returns the total number of codewords used to store data and EC information.
 *
 * @param  {Number} version QR Code version
 * @return {Number}         Data length in bits
 */

/**
 * Returns version information with relative error correction bits
 *
 * The version information is included in QR Code symbols of version 7 or larger.
 * It consists of an 18-bit sequence containing 6 data bits,
 * with 12 error correction bits calculated using the (18, 6) Golay code.
 *
 * @param  {Number} version QR Code version
 * @return {Number}         Encoded version info bits
 */

/**
 * Returns version number from a value.
 * If value is not a valid version, returns defaultValue
 *
 * @param  {Number|String} value        QR Code version
 * @param  {Number}        defaultValue Fallback value
 * @return {Number}                     QR Code version number
 */

/**
 * Set bit value at specified location
 * If reserved flag is set, this bit will be ignored during masking process
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 * @param {Boolean} reserved
 */

/**
 * Splits a string in various segments with the modes which
 * best represent their content.
 * The produced segments are far from being optimized.
 * The output of this function is only used to estimate a QR Code version
 * which may contain the data.
 *
 * @param  {string} data Input string
 * @return {Array}       Array of segments
 */

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

/**
 * The Kanji mode efficiently encodes Kanji characters in accordance with
 * the Shift JIS system based on JIS X 0208.
 * The Shift JIS values are shifted from the JIS X 0208 values.
 * JIS X 0208 gives details of the shift coded representation.
 * Each two-byte character value is compacted to a 13-bit binary codeword.
 *
 * @type {Object}
 */

/**
 * Weighted penalty scores for the undesirable features
 * @type {Object}
 */

/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */

/**
* Find adjacent modules in row/column with the same color
* and assign a penalty value.
*
* Points: N1 + i
* i is the amount by which the number of adjacent modules of the same color exceeds 5
*/

/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @preserve
	 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
	 * derived from CryptoJS.mode.CTR
	 * Jan Hruby jhruby.web@gmail.com
	 */

/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

/******************************************************************************
 * Created 2008-08-19.
 *
 * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
 *
 * Copyright (C) 2008
 *   Wyatt Baldwin <self@wyattbaldwin.com>
 *   All rights reserved
 *
 * Licensed under the MIT license.
 *
 *   http://www.opensource.org/licenses/mit-license.php
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *****************************************************************************/

/************************************************************************/

/******/

/***/

/*.*/

/*/*/

/*jslint bitwise: true */

//

//       2) `positive` is true if unsigned mod is requested

//       request both div & mod

//       to `div` to request div only, or be absent to

//    buffer.fill(buffer[, offset[, end]])

//    buffer.fill(number[, offset[, end]])

//    buffer.fill(string[, offset[, end]][, encoding])

// "Software"), to deal in the Software without restriction, including

// "next" with an undefined arg.

// 'a'

// 'a' - 'f'

// 'abxxcd' will be treated as 'ab')

// 'path' module extracted from Node.js v8.11.1 (only the posix part)

// (0x7ffffff)

// - buffer - a Buffer to search

// - byteOffset - an index into `buffer`; will be clamped to an int32

// - dir - true for indexOf, false for lastIndexOf

// - encoding - an optional encoding, relevant is val is a string

// - val - a string, Buffer, or number

// -0 = 0

// -1 - if `this` < `num`

// -this - num = -(this + num)

// ...and explore the edges that connect u to those nodes, updating

// .constructor.prototype properties for functions that return Generator

// .throw, and .return (see defineIteratorMethods).

// .throw, and .return methods.

// 0 - if `this` == `num`

// 0x36 ^ 0x5c = 0x6a

// 1 - if `this` > `num`

// 2 ^ 255 - 19

// 2 ^ 53 (unsafe)

// 2 leads in a row

// 256 = 9 * 26 + 22

// 32 x 32bit words

// ================

// @see {@link Mode.getCharCountIndicator}.

// @see {@link initTables}

// @see {@link mul}

// A * x + B * y = x

// A reduce context, could be using montgomery or something better, depending

// A return or throw (when the delegate iterator has no throw

// A type of promise-like that resolves synchronously and supports only one observer

// Absorb

// Add 0x80 byte

// Add IV to config

// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else

// Add `num` to `this`

// Add `num` to `this` in-place

// Add a terminator.

// Add bit and propagate, if needed

// Add data codewords

// Add default alpha value

// Add function modules

// Add pad bytes if the string is still shorter than the total number of required bits.

// Add padding

// Add padding to key

// Add plain number `num` to `this`

// Add temporary dummy bits for format info just to set them as reserved.

// After adding the terminator, if the number of bits in the string is not a multiple of 8,

// Allocate matrix buffer

// Allow arbitrary length keys

// Among the various tricks for obtaining a reference to the global

// And `num` with `this`

// And `num` with `this` in-place

// And first word and num

// And remove leading zeroes

// Apache License 2.0

// Apped EC codewords

// Append

// Append length

// Apply config defaults

// Apply mask pattern

// Are we oob?

// Arguments:

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass

// ArrayBuffer view

// Assemble 16 subkeys

// Assume big-endian

// Assumes that `num` is less than `P^2`

// AsyncIterator objects; they just return a Promise for the value of

// Asynchronously await a promise and pass the result to a finally continuation

// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing

// Asynchronously iterate through an object's values

// At this point both numbers are positive

// At this point both numbers have the same sign

// At this point the path should be resolved to a full absolute path, but

// Augment

// Avoid failures from read-only properties

// Avoid propagating failures to Promises returned by later

// BN

// Base reduction engine

// Based on http://stackoverflow.com/a/22747272/680742, the browser with

// Be forgiving, per 25.3.3.3.3 of the spec:

// Both numbers are positive at this point

// Buffer#write(string)

// Build optimized segments

// By explicitly using `prop-types` you are opting into new production behavior.

// CONCATENATED MODULE: ./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/memoize/dist/memoize.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/stylis/dist/stylis.browser.esm.js

// CONCATENATED MODULE: ./node_modules/clsx/dist/clsx.m.js

// CONCATENATED MODULE: ./node_modules/preact/compat/dist/compat.module.js

// CONCATENATED MODULE: ./node_modules/preact/dist/preact.module.js

// CONCATENATED MODULE: ./node_modules/preact/hooks/dist/hooks.module.js

// CONCATENATED MODULE: ./node_modules/styled-components/dist/styled-components.browser.esm.js

// CONCATENATED MODULE: ./src/client/index.jsx

// CONCATENATED MODULE: ./src/uni/App.jsx

// CONCATENATED MODULE: ./src/uni/GlobalStyle.jsx

// CONCATENATED MODULE: ./src/uni/WC.tsx

// CONCATENATED MODULE: ./src/uni/components/Banner.tsx

// CONCATENATED MODULE: ./src/uni/components/ConnectButton.tsx

// CONCATENATED MODULE: ./src/uni/components/Header.tsx

// CONCATENATED MODULE: ./src/uni/helpers/chains.ts

// CONCATENATED MODULE: ./src/uni/helpers/ellipseAddress.ts

// CONCATENATED MODULE: ./src/uni/styles.ts

// Cached version of prime

// Calculate EC codewords for this data block

// Calculate EC for this data block

// Calculate new counter values

// Calculate new state values

// Calculate penalty

// Calculate required number of bits

// Calculate the g-values

// Can typed array instances be augmented?

// Can typed array instances can be augmented?

// Carry

// Carry bit

// Chainable

// Character count indicator + mode indicator bits

// Check bit and return

// Check if module is in cache

// Check if the specified version can contain the data

// Check if typed arrays are supported

// Chi

// Choose mixing block

// Clamp

// Clamp excess bits

// Clone "words" array

// Clone key for inner and outer pads

// Coerce to Number.

// Common case.

// CommonJS

// Compare two numbers and return:

// Computation

// Compute Constants

// Compute HMAC

// Compute constants

// Compute double table

// Compute inv key schedule

// Compute inverse subkeys

// Compute lookup tables

// Compute multiplication

// Compute next LFSR

// Compute next counter

// Compute pi index constants

// Compute rho offset constants

// Compute round constants

// Compute sbox

// Concat

// Constants

// Construct high and low argument for squaring

// Continue with the outer return, now that the delegate

// Convert

// Convert buffers to uint8

// Convert from short to long form (fff -> ffffff)

// Convert message to array, pad it, and join into 32bit blocks

// Convert other array views to uint8

// Convert result to a 13-bit binary string

// Convert string to CipherParams

// Convert string to WordArray, else assume WordArray already

// Cooley-Tukey algorithm for FFT

// Copy 0 bytes; we're done

// Copy one byte at a time

// Copy one word at a time

// Copy properties from require('buffer')

// Copy rest of the words

// Copy static methods from Buffer

// Copyright Joyent, Inc. and other Node contributors.

// Cost of s to u plus the cost of u to v across e--this is *a*

// Costs of shortest paths from s to all nodes encountered.

// Costs of shortest paths from s to all nodes encountered; differs from

// Could use `inherits` module, but don't want to move from single file

// Count padding bytes

// Counters

// Create DES instances

// Create a new module (and put it into the cache)

// Create an object with no prototype

// Create and return serializable cipher params

// Create default initializer

// Create final data

// Create lookup table for `toString('hex')`

// Create possibly bigger array to ensure that it fits the number

// Create subkey

// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

// DCE check should happen before ReactDOM bundle executes so that

// Decode as big chunks as possible

// Decode in chunks to avoid "call stack size exceeded".

// Decrypt and XOR

// Decryption is symetric

// Define Generator.prototype.{next,throw,return} in terms of the

// Define the runtime globally (as expected by generated code) as either

// Define the unified helper method that is used to implement .next,

// Delegate generator ran and handled its own exceptions so

// Deliberately forget the last sent value so that we don't

// Denormalize

// Derive key and IV

// Derive key and other params

// Detect buggy property enumeration order in older V8 versions.

// DevTools can report bad minification during injection.

// DevTools shouldn't crash React, no matter what.

// Dispatch the exception by looping back around to the

// Divide the buffer into the required number of blocks

// Do nothing

// Drop

// Dummy constructor functions that we use as the .constructor and

// ESM COMPAT FLAG

// EXPORTS

// EXTERNAL MODULE: ./node_modules/@walletconnect/client/dist/cjs/index.js

// EXTERNAL MODULE: ./node_modules/@walletconnect/qrcode-modal/dist/cjs/index.js

// EXTERNAL MODULE: ./node_modules/blockies-ts/dist/cjs/index.js

// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js

// EXTERNAL MODULE: ./node_modules/path-browserify/index.js

// EXTERNAL MODULE: ./node_modules/prop-types/index.js

// EXTERNAL MODULE: ./node_modules/react-dom/index.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// Else call normal init

// Empty buffer means no match

// Encrypt

// Enough data, try updating

// Estimate best version that can contain raw splitted segments

// Exception thrown outside of any try block that could handle

// Execute the module function

// Exported mostly for testing purposes, use plain name instead

// Exporting

// Extend message

// Extend the buffer to fill the data capacity of the symbol corresponding to

// Extend the buffer with leading zeroes

// Extend the key according to the keying options defined in 3DES standard

// Extended mode, copy masked part

// Extension does not match, so our result is the entire path

// Extract bytes

// Extract salt

// Fallback to a more advanced decoder

// Fallback: Return an object instance of the Buffer class

// Fast case

// Fast case - exact division

// Fast case: bit is much higher than all existing words

// Fast length reduction

// Fast path: If `val` fits into a single byte, use that numeric value.

// Fatal error conditions

// Final data update

// Final message update

// Final permutation

// Finalize

// Finally, search either indexOf (if dir is true) or lastIndexOf

// Find Q and S, that Q * 2 ^ S = (P - 1)

// Find Round(`this` / `num`)

// Find `this` % `num`

// Find `this` / `num`

// Find best mask pattern

// Find length of limb in base

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,

// First coord is always 6

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97

// Flag the module as loaded

// For IE11 support

// For characters with Shift JIS values from 0x8140 to 0x9FFC:

// For characters with Shift JIS values from 0xE040 to 0xEBBF

// For example: from='/'; to='/foo'

// For example: from='/foo'; to='/'

// For example: from='/foo/bar'; to='/foo/bar/baz'

// For example: from='/foo/bar/baz'; to='/foo/bar'

// For the native GeneratorFunction constructor, the best we can

// Force coercion to uint32. This will also coerce falsey/NaN values to 0.

// Format

// Gamma0

// GenStateExecuting and loop back for another invocation.

// Generate four keystream words

// Generate initial counter values

// Generate initial state values

// Generate key

// Generate keystream

// Generate random salt

// Generate the relative path based on the path difference between `to`

// Get input

// Get input, add round key

// Get nodes adjacent to u...

// Get non-dir info

// Get number of padding bytes from last byte

// Get the cost of the edge running from u to v.

// Get the min version that can contain data

// HELPER FUNCTIONS

// Handle Uint8Array

// Handle complete words

// Handle string cases:

// Handle the residue

// Hash final blocks

// Helper for defining the .next, .throw, and .return methods of the

// High XOR low

// IE won't copy toString using the loop above

// IV setup

// If an exception is thrown from innerFn, we leave state ===

// If bytes.length is odd, the last 8 bits must be ignored (same as node.js)

// If enqueue has been called before, then we want to wait until

// If estimated version is undefined, try with the highest version

// If no version is found, data cannot be stored

// If not specified, use min version as default

// If outerFn provided, then outerFn.prototype instanceof Generator.

// If regeneratorRuntime is defined globally and we're in a module,

// If the bit string is fewer than four bits shorter, add only the number of 0s that

// If the bit string is more than four bits shorter than the required number of bits,

// If the bit string is shorter than the total number of required bits,

// If the delegate iterator has a return method, give it a

// If the dispatched exception was caught by a catch block,

// If the number of input data characters is not a multiple of two,

// If the number of input digits is not an exact multiple of three,

// If the return method threw an exception, let that

// If this is our first dot, mark it as the start of our extension

// If we haven't visited v yet OR if the current known cost from s to

// If we reached a path separator that was not part of a set of path

// Ignore padding

// Ignore the finally entry if control is not jumping to a

// Important!

// In the Shift JIS system, Kanji characters are represented by a two byte combination.

// In the nodes remaining in graph that have a known cost from s,

// In-place Multiplication

// In-place division by number

// Increment at the bit position in-line

// Increment counter

// Init HMAC

// Init hasher

// Initial permutation

// Initial values

// Initialize as zero

// Initialize quotient

// Initialize this word array

// Initializer's prototype is the subtype object

// Input data characters are divided into groups of two characters

// Inspired by stringToUtf8ByteArray() in closure-library by Google

// Interleave the data and error correction codewords from each block

// Intermediate hash value

// Invalid ranges are not set to a default, so can range check early.

// Invert number in the field F(num)

// Iota

// It's an array; check it is a valid representation of a byte

// Iterate the system

// Iterate the system four times

// Iterations

// Iterator interface in terms of a single ._invoke method.

// JIS X 0208 gives details of the shift coded representation.

// Just truncate output

// K = 0x1000003d1 = [ 0x40, 0x3d1 ]

// K = 0x13

// Keep at least one block in the buffer for unpadding

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

// Keep track of all the replacements and prefill the map with the `BOM`

// Key setup

// L  M  Q  H

// Last coord is always (size - 7)

// Lastly, append the rest of the destination (`to`) path that comes after

// Like returning generator.throw(uncaught), but without the

// Load entry module and return exports

// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN

// Make sure data can be encoded

// Make sure the key length is valid (64, 128 or >= 192 bit)

// Math.pow(`this`, `num`)

// Missing `=` should be `null`:

// Mix Rcon

// Mix column lanes

// Mix in derived params

// Mix rows

// Modify counter values

// Modify the counters

// Montgomery method engine

// Multiply `this` by `num`

// Multiply employing FFT

// Multiply most significant byte of result by 0xC0

// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,

// NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max

// NOTE: 1) `mode` can be set to `mod` to request mod only,

// NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb

// NOTE: `hint` is a lowest bit before trailing zeroes

// NOTE: at this stage it is known that the top bit is set

// NOTE: deprecated test name instead

// NOTE: if `extended` is present - it will be filled with destroyed bits

// NOTE: lo is 27bit maximum

// Native (experimental IE 11) crypto from window (Browser)

// Native crypto from global (NodeJS)

// Native crypto from window (Browser)

// Native crypto import via require (NodeJS)

// No need to verify that "this.length <= MAX_UINT32" since it's a read-only

// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

// Node converts strings with length < 2 to ''

// Node strips out invalid characters like \n and \t from the string, base64-js does not

// Node supports requesting up to this number of bytes

// Node takes equal signs as end of the Base64 encoding

// Node's code seems to be doing this and not & 0x7F..

// Normalize byteOffset

// Normalize byteOffset: negative offsets start from the end of the buffer

// Normalize the path

// Normalize val

// Not ``this`` with ``width`` bitwidth

// Not sure about the optimal order of these conditions:

// Not used

// Note that simple async functions are implemented on top of

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:

// Note: cannot use `length < K_MAX_LENGTH` here because that fails when

// Number of trailing zero bits

// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

// OR the last index of `val` in `buffer` at offset <= `byteOffset`.

// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

// Optimization - zeroify

// Optimization: double the size of the anti-log table so that we don't need to mod 255 to

// Or `num` with `this`

// Or `num` with `this` in-place

// P = 2 ^ N - K

// Pad

// Pad data

// Pad with zeroes

// Padding

// Parse base64

// Pass through all other types to `Buffer.from`

// Peel one iteration (compiler can't do it, because of code complexity)

// Perform concrete-algorithm logic

// Perform concrete-cipher logic

// Perform concrete-hasher logic

// Performs "tweedling" phase, therefore 'emulating'

// Perhaps a Uint8Array

// Permission is hereby granted, free of charge, to any person obtaining a

// Polyfill comb

// Possible sign change

// Precomputed Rcon lookup

// Predecessor map for each node that has been encountered.

// Prefix data with character count indicator.

// Prepare data buffer

// Prime numbers with efficient reduction

// Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1

// Process available blocks

// Process blocks

// Process final blocks

// Process pending data in blocks

// Proxy hash functions to the main object

// Pseudo-Mersenne prime

// Push carried bits as a mask

// Rather than returning an object with a next method, we keep

// React v16.11 and below

// React v16.12 and above

// Reduction context

// Reference supertype

// Remember this block to use with next block

// Remove IV for subsequent blocks

// Remove common factor of two

// Remove leading `0` from `this`

// Remove one more byte -- the 0x80 byte

// Remove padding

// Remove processed words

// Remove salt from ciphertext

// Remove zero padding

// Replace all decoded components

// Replace format info bits with correct values

// RequireJS/AMD

// Reset

// Reset block mode

// Reset cipher

// Reset data buffer

// Resolves . and .. elements in a path with directory names

// Respect the "view", i.e. byteOffset and byteLength, without doing a copy

// Return an augmented `Uint8Array` instance

// Return an augmented `Uint8Array` instance, for best performance

// Return an iterator with no values.

// Return early if start > this.length. Done here to prevent potential uint32

// Return final computed hash

// Return max number of storable codewords

// Return negative clone of `this`

// Return negative clone of `this` % `red modulo`

// Return number of used bits in a BN

// Return only lowers bits of number

// Return only lowers bits of number (in-place)

// Return params

// Return processed words

// Return the exports of the module

// Returns binary-reversed representation of `x`

// Reusable object

// Reusable objects

// Reusable objects for temporary values

// Reverse the bytes

// Rho Pi

// Rho pi at x = y = 0

// Rot word

// Rotate lanes

// Round down

// Round up

// Round up to include partial blocks

// Rounds

// SVG-related properties

// Save old counter values

// Scan 24-bit chunks and add them to the number

// Search for a byte value [0-255]

// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

// See: https://en.wikipedia.org/wiki/Base64#URL_applications

// See: https://github.com/beatgammit/base64-js/issues/42

// See: https://github.com/feross/buffer/issues/154

// See: https://github.com/feross/buffer/issues/166

// See: https://github.com/feross/buffer/issues/219

// See:https://tools.ietf.org/html/rfc2315

// Select 48 bits according to PC2

// Select from the left 28 key bits

// Select from the right 28 key bits

// Separate key and IV

// Set `bit` of `this`

// Set initial values

// Set output

// Shift by 9 limbs

// Shift rows, sub bytes, add round key

// Shift rows, sub bytes, mix columns, add round key

// Shift the register

// Shift-left

// Shift-left in-place

// Shift-right

// Shift-right in-place

// Short-cut

// Shortcut

// Shortcuts

// Shorten key, if needed

// Since each subkey is applied to an expanded 32-bit input,

// Skip empty entries

// Skip if position is occupied by finder patterns

// Skip leading zeroes

// Skip reset of nRounds has been set before and key did not change

// Something else, but behaves like an array (maybe a Buffer? Arguments?)

// Sort object keys, not values

// Spawn

// Special case: looking for empty string/buffer always fails

// Split the array in 2 parts

// Square root over p

// Squeeze state to retrieve hash

// Store transform mode and key

// Strip both numbers to approximate shift value

// Sub word

// Subtract 0x8140 from Shift JIS value

// Subtract 0xC140 from Shift JIS value

// Subtract `num` from `this`

// Subtract `num` from `this` in-place

// Subtract plain number `num` from `this`

// Subtraction overflow

// Sum all words with the same `i + j = k` and accumulate `ncarry`,

// Support decoding URL-safe base64 strings, as Node.js does.

// Swap

// Swap 2nd and 4th rows

// Swap `a` and `b` to make `a` always bigger than `b`

// Swap bits across the left and right words

// Swap endian

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS

// TODO(indutny): implement me

// TODO(indutny): it may be reasonable to omit it for users who don't need

// Temporary values

// Test for A's keys different from B.

// Test for salt

// Test if n bit is set

// The (right-most) trimmed path component is exactly '..'

// The ._invoke method unifies the implementations of the .next,

// The QR code specification says to use byte-wise modulo 100011101 arithmetic.

// The above copyright notice and this permission notice shall be included

// The block cipher

// The character count indicator is a string of bits that represents the

// The character count indicator must be placed after the mode indicator

// The character value of the first character is multiplied by 45

// The character value of the second digit is added to the product

// The context.catch method must only be called with a location

// The input data string is divided into groups of three digits,

// The module cache

// The require function

// The root entry object (effectively a try statement without a catch

// The sum is then stored as 11-bit binary number

// These blocks will be replaced with correct values later in code.

// These byte values are shifted from the JIS X 0208 values.

// Theta

// This behaves neither like String nor Uint8Array in that we set start/end

// This block becomes the previous block

// This entry module is referenced by other modules so it can't be inlined

// This invoke function is written in a style that assumes some

// This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}

// This is reduced incarnation of the binary EEA

// This means that when a number is 256 or larger, it should be XORed with 0x11D.

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)

// To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer

// To avoid creating an additional object, we just hang the .value

// Tonelli-Shanks algorithm (Totally unoptimized and slow)

// Total codewords for this QR code version (Data + Error correction)

// Total number of error correction codewords

// Transpose lanes

// Trim any leading backslashes

// Trim off extra bytes after placeholder bytes are found

// Try the built in decoder first

// Try to decode the entire string first

// Try to match the explicit extension

// Try/catch helper to minimize deoptimizations. Returns a completion

// USE OR OTHER DEALINGS IN THE SOFTWARE.

// Undo previously applied mask

// Undo swap from last round

// Unpad

// Unpad data

// Unsigned comparison

// Update counters

// Update state

// Update the hash

// Update working variables

// Usage:

// Use Byte mode as default

// Use Mode.BYTE if Kanji support is disabled

// Use a for loop to avoid recursion

// Use built-in when available, missing from IE11

// Use getRandomValues method (Browser)

// Use higher error correction level as default

// Use randomBytes method (NodeJS)

// Utils

// Verify that the code above has been dead code eliminated (DCE'd).

// Very short reduction

// Walk GF(2^8)

// Warning: maxLength not taken into account in base64Write

// We allow 0, but anything false-ish uses the default 1

// We cannot safely handle numbers beyond the safe range for integers

// We don't expect any of the above to throw, but better to be safe.

// We get here if `from` is the exact base path for `to`.

// We get here if `from` is the root

// We get here if `to` is the exact base path for `from`.

// We get here if `to` is the root.

// We go 1 magnitude less, for safety

// We matched the extension, so mark this as the end of our path

// We saw a non-dot and non-path separator before our dot, so we should

// We saw a non-dot character immediately before the dot

// We saw the first non-path separator

// We saw the first non-path separator, mark this as the end of our

// We saw the first non-path separator, remember this index in case

// We should still report in case we break this code.

// When a yielded Promise is resolved, its final value becomes

// Within the body of any async function, `await x` is transformed to

// Working variables

// Writing a hex string, for example, that contains invalid characters will

// XOR and encrypt

// XOR blocks

// XOR intermediate with block

// XOR keys with pad constants

// XXX: Do we actually need both `costs` and `open`?

// Xor `num` with `this`

// Xor `num` with `this` in-place

// Zero pad the rest

// _prime_ fields F(p) at a maximal speed

// `costs` in that it provides easy access to the node that currently has

// `this` * `this`

// `this` * `this` in-place

// `value instanceof AwaitArgument` to determine if the yielded value is

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// a > b

// a terminator of up to four 0s must be added to the right side of the string.

// a.length > b.length

// above, designated to invert members of the

// accidentally pass it on to the delegate.

// add binary data sequence to buffer

// add four 0s to the end.

// add: function (word) {

// all previous Promises have been resolved before calling invoke,

// allows the consumer to decide what to do with the yielded

// already have an existing method we want to call, so there's no need

// also ensures that the minifier will not anonymize the function.

// alternative to using Object.keys for old browsers

// and .done properties off the next function object itself. This

// and 00010001 (0x11) alternately.

// and `from`

// and add least significant byte to product

// and data mode

// and each group is converted to its 10-bit binary equivalent.

// and encoded as 11-bit binary codes.

// and must be a certain number of bits long, depending on the QR version

// and: function (word) {

// any necessary setup in a predictable way. This predictability

// apply round transforms

// architecture yet.

// are needed to reach the required number of bits.

// argument that corresponds to a known catch block.

// ascending copy from start

// assume utf8

// async functions in terms of async generators, it is especially

// avoid extra slice()

// await, by contrast, there is no opportunity to examine the

// b = min-length(num, this)

// base64 is 4/3 + up to two characters of the original data

// behavior between yield and await is important, because it

// behaviour of the recursive algorithm

// bottom-left

// bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

// bridge url

// buffer.slice automatically checks if the end is past the end of

// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer

// call invoke immediately, without waiting on a callback to fire,

// calling function (or Promise) will handle exceptions.

// can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues

// can-promise has a crash in some versions of react native that dont have

// cause everything after the first invalid character to be ignored. (e.g.

// chance to clean up.

// coercion fail below.

// component

// context.dispatchException(arg) call above.

// copies of the 'buffer' package in use. This method works even for Buffer

// copy of this software and associated documentation files (the

// copy values into round key arrays

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)

// cost from s to v that may or may not be less than the current

// cost of u to v across e), update v's cost in the cost list and

// create an irreducible generator polynomial

// create new connector

// current iteration. If the Promise is rejected, however, the

// cutesy, but they are curmudgeons.

// decryption round keys

// define __esModule on exports

// define getter functions for harmony exports

// descending copy from end

// distribute, sublicense, and/or sell copies of the Software, and to permit

// do is to check its .name property.

// don't hoist over string (html) components

// encode to utf16 (surrogate pair dance)

// encode utf8

// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8

// encryption round keys

// enqueue has not been called before, then it is important to

// eslint-disable-line eqeqeq

// eslint-disable-line no-new-wrappers

// eslint-disable-line no-self-compare

// exception prevail over the original return or throw.

// execute code before the first await. Since we implement simple

// execution once rather than once for the test and for the exec again below

// executor callback, and why async functions synchronously

// extends data size to data+genPoly size

// extension

// extract a block of data from buffer

// find the node, u, that currently has the shortest path from s.

// fixed module

// following conditions:

// getDefaultExport function for compatibility with non-harmony modules

// getRandomValues fails on IE if size == 0

// go through the array every three bytes, we'll deal with trailing stuff later

// handle relative paths to be safe (might happen when process.cwd() fails)

// has a stable shape and so hopefully should be cheap to allocate.

// have a good chance at having a non-empty extension

// have been (and was previously) designed to take a closure to be

// here the magic happens

// horizontal

// http://fb.me/prop-types-in-prod

// http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html

// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters

// http://www.requirejs.org/docs/api.html

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues

// https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

// https://github.com/amdjs/amdjs-api/wiki/AMD

// https://github.com/feross/buffer/pull/148

// https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143

// https://github.com/google/closure-library/blob/master/LICENSE

// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48

// https://github.com/soldair/node-qrcode/issues/157

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// i - 2

// if (n < 32) {

// if it is a % sign, encode the following 2 bytes as a hex value

// implementation from standard node.js 'util' module

// important to get this right, even though it requires care.

// in all copies or substantial portions of the Software.

// in every case, so we don't have to touch the arguments object. The

// instances that were created from another copy of the `buffer` package.

// into the generator, abandon iteration, whatever). With

// inverse-cipher-ify the decryption round key (fips-197 section 5.3)

// invocations of the iterator.

// invoked without arguments, but in all the cases we care about we

// is surrogate component

// is why the Promise constructor synchronously invokes its

// it, so set the completion value of the entire function to

// iterator has been terminated.

// key expansion (fips-197 section 5.2)

// key expansion (for non-256 bit)

// key expansion for 256-bit keys is "slightly different" (fips-197)

// known cost to v.

// last char was a lead

// length is NaN (which is otherwise coerced to zero.)

// let the generator function handle the exception.

// limit of Crypto.getRandomValues()

// location outside the try/catch block.

// locations where there is no enclosing try statement.

// make the exports object identical to regeneratorRuntime.

// make the textarea out of viewport

// meant to be awaited. Some may consider the name of this method too

// method) always terminates the yield* loop.

// minifier not to mangle the names of these two functions.

// module.exports (if we're in a module) or a new, empty object.

// multiplication (like elliptic secp256k1).

// multiply by 2

// must be multiple of 3

// navigator clipboard api method'

// navigator clipboard api needs a secure context (https)

// necessary. v is the node across the current edge from u.

// negative + positive

// no combination of Error Correction Level and data mask pattern

// no lead yet

// node ID => cost

// node ID => predecessor node ID

// node.js

// node.js module exports

// not used by this implementation

// not: function () {

// note that ncarry could be >= 0x3ffffff

// num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)

// number of characters that are being encoded.

// object, this seems to be the most reliable technique that does not

// objects. For full spec compliance, you may wish to configure your

// old school shim for old browsers

// on the `m` itself.

// only additional allocation required is the completion record, which

// only option is to throw it from the await expression, and

// only svg for now.

// opted for using reduce here rather than Array#first with a regex.test call

// or a finally block) gives us a place to store values thrown from

// or: function (word) {

// overhead of an extra function call.

// pad the end with zeros, but make sure to not forget the extra bytes

// pad the string on the right with 0s to make the string's length a multiple of 8.

// path component

// path.resolve([from ...], to)

// persons to whom the Software is furnished to do so, subject to the

// phantomjs needs to throw

// positive + negative

// prefix data with mode indicator (4 bits)

// probably something that needs to be benchmarked though

// property of a typed array.

// reason. Note that rejections of yielded Promises are not

// record like context.tryEntries[i].completion. This interface could

// regardless of what the method was, we continue as if it is

// rejection (swallow it and continue, manually .throw it back

// rejection reason outside the generator function, so the

// reliably in a browserify context because there could be multiple different

// remove all zeros from buffer head

// replacement char (U+FFFD) and advance only 1 byte

// result for this iteration will be rejected with the same

// return X64Word.create(high, low);

// return this.shiftL(n).or(this.shiftR(64 - n));

// return this.shiftR(n).or(this.shiftL(64 - n));

// rotL: function (n) {

// rotR: function (n) {

// separators at the end of the string, stop now

// shiftL: function (n) {

// shiftR: function (n) {

// should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized

// similar to x >= 256, but a lot faster (because 0x100 == 256)

// since the masking operation must be performed only on the encoding region.

// slightly revisited to rely on looping instead of recursion

// so Buffer.isBuffer(Buffer.prototype) will be false

// so that results are always delivered in the correct order. If

// so that the async generator function has the opportunity to do

// standard global objects

// startup

// stay inside the bounds (because we will mainly use this table for the multiplication of

// text area method

// the .value of the Promise<{value,done}> result for the

// the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)

// the `instanceof` check but they should be treated as of that type.

// the buffer so we don't have to here

// the character value of the final character is encoded as a 6-bit binary number.

// the common path parts

// the cost of the shortest paths to any or all of those nodes as

// the final one or two digits are converted to 4 or 7 bits respectively.

// the final result produced by the iterator.

// the known shortest path from s.

// the last round is special

// the lowest limit is Chrome, with 0x10000 args.

// the method takes exactly one argument, since that happens to be true

// the subkey can be broken into 8 values scaled to 32-bits,

// then let that catch block handle the exception normally.

// things simple and return the next function itself.

// this - (-num) = this + num

// this is primarily because using the reduce we only perform the regex

// this is the max bytes crypto.getRandomValues

// throw the exception.

// thrown back into the generator function, as is the case

// to create a new function object. We can even get away with assuming

// to detect a Buffer instance. It's not possible to use `instanceof Buffer`

// to their upper/lower bounds if the value passed is out of range.

// to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit

// top-left

// top-right

// transplited with Babel

// two GF numbers, no more).

// undefined is handled specially as per ECMA-262 6th Edition,

// unexpected trail

// unified ._invoke helper method.

// unpaired lead

// update v's predecessor in the predecessor list (it's now u).

// use indirect eval (which violates Content Security Policy).

// v is greater than the new cost we just found (cost of s to u plus

// valid lead

// valid surrogate pair

// var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;

// var groupBase = Math.pow(base, groupSize);

// var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));

// var high = (this.high + word.high + carry) | 0;

// var high = (this.high << n) | (this.low >>> (32 - n));

// var high = 0;

// var high = this.high & word.high;

// var high = this.high >>> n;

// var high = this.high ^ word.high;

// var high = this.high | word.high;

// var high = this.low << (n - 32);

// var high = ~this.high;

// var low = (this.low + word.low) | 0;

// var low = (this.low >>> n) | (this.high << (32 - n));

// var low = 0;

// var low = this.high >>> (n - 32);

// var low = this.low & word.low;

// var low = this.low << n;

// var low = this.low ^ word.low;

// var low = this.low | word.low;

// var low = ~this.low;

// vertical

// we did not generate a valid codePoint so insert a

// we need it if the extension ends up not matching

// webpackBootstrap

// when an awaited Promise is rejected. This difference in

// which allows the key to be used without expansion

// will result in an all-zero data string

// without limitation the rights to use, copy, modify, merge, publish,

// xor final data with mask pattern in order to ensure that

// xor: function (word) {

// }

// } else {

// },

//# sourceMappingURL=blockchain.js.map

//# sourceMappingURL=browser.js.map

//# sourceMappingURL=compat.module.js.map

//# sourceMappingURL=constants.js.map

//# sourceMappingURL=encoding.js.map

//# sourceMappingURL=error.js.map

//# sourceMappingURL=errors.js.map

//# sourceMappingURL=ethereum.js.map

//# sourceMappingURL=events.js.map

//# sourceMappingURL=format.js.map

//# sourceMappingURL=index.js.map

//# sourceMappingURL=json.js.map

//# sourceMappingURL=jsonrpc.js.map

//# sourceMappingURL=local.js.map

//# sourceMappingURL=misc.js.map

//# sourceMappingURL=mobile.js.map

//# sourceMappingURL=multi.js.map

//# sourceMappingURL=network.js.map

//# sourceMappingURL=payload.js.map

//# sourceMappingURL=pkcs7.js.map

//# sourceMappingURL=provider.js.map

//# sourceMappingURL=random.js.map

//# sourceMappingURL=registry.js.map

//# sourceMappingURL=router.js.map

//# sourceMappingURL=routing.js.map

//# sourceMappingURL=schema.js.map

//# sourceMappingURL=session.js.map

//# sourceMappingURL=storage.js.map

//# sourceMappingURL=styled-components.browser.esm.js.map

//# sourceMappingURL=sync.js.map

//# sourceMappingURL=types.js.map

//# sourceMappingURL=url.js.map

//# sourceMappingURL=utils.js.map

//# sourceMappingURL=validator.js.map

//# sourceMappingURL=validators.js.map

///////////////////////

//overflow
